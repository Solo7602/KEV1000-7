using System;
using System.Collections.Generic;

class KeyValuePair<TKey, TValue>
{
    public TKey Key { get; set; }
    public TValue Value { get; set; }

    public KeyValuePair(TKey key, TValue value)
    {
        Key = key;
        Value = value;
    }
}

class HashTable<TKey, TValue>
{
    private int size;
    private List<KeyValuePair<TKey, TValue>>[] table;

    public HashTable(int size)
    {
        this.size = size;
        table = new List<KeyValuePair<TKey, TValue>>[size];
    }

    private int HashFunction(TKey key)
    {
        return key.GetHashCode() % size;
    }

    public void Insert(TKey key, TValue value)
    {
        int index = HashFunction(key);

        if (table[index] == null)
        {
            table[index] = new List<KeyValuePair<TKey, TValue>>();
        }

        // Check for key duplication
        foreach (var kvp in table[index])
        {
            if (kvp.Key.Equals(key))
            {
                Console.WriteLine("Duplicate key found. Key not inserted.");
                return;
            }
        }

        table[index].Add(new KeyValuePair<TKey, TValue>(key, value));
    }

    public TValue Search(TKey key)
    {
        int index = HashFunction(key);

        if (table[index] != null)
        {
            foreach (var kvp in table[index])
            {
                if (kvp.Key.Equals(key))
                {
                    return kvp.Value;
                }
            }
        }

        throw new KeyNotFoundException("Key not found");
    }

    public void Display()
    {
        for (int i = 0; i < size; i++)
        {
            Console.Write($"Bucket {i}: ");
            if (table[i] != null)
            {
                foreach (var kvp in table[i])
                {
                    Console.Write($"[{kvp.Key}, {kvp.Value}] ");
                }
            }
            Console.WriteLine();
        }
    }
}

class Program
{
    static void Main()
    {
        HashTable<int, string> hashTable = new HashTable<int, string>(10);

        hashTable.Insert(5, "Apple");
        hashTable.Insert(14, "Banana");
        hashTable.Insert(23, "Cherry");
        hashTable.Insert(32, "Orange");

        Console.WriteLine("Search result:");
        Console.WriteLine(hashTable.Search(23));

        Console.WriteLine("nHash table contents:");
        hashTable.Display();
    }
}

Этот код демонстрирует реализацию хэш-таблицы с методом цепочек и перехэшированием на C#. Мы используем обобщенные типы ключа и значения для универсальности. Методы вставки, поиска и отображения содержимого таблицы также присутствуют в коде.
