using System;

class CountingSort
{
    public static void Sort(int[] array)
    {
        int n = array.Length;
        int max = array[0];
        for (int i = 1; i < n; i++)
        {
            if (array[i] > max)
            {
                max = array[i];
            }
        }

        int[] count = new int[max + 1];
        int[] output = new int[n];

        for (int i = 0; i < n; i++)
        {
            count[array[i]]++;
        }

        for (int i = 1; i <= max; i++)
        {
            count[i] += count[i - 1];
        }

        for (int i = n - 1; i >= 0; i--)
        {
            output[count[array[i]] - 1] = array[i];
            count[array[i]]--;
        }

        for (int i = 0; i < n; i++)
        {
            array[i] = output[i];
        }
    }

    public static void Main()
    {
        int[] arr = { 4, 2, 2, 8, 3, 3, 1 };

        Console.WriteLine("Исходный массив:");
        foreach (int i in arr)
        {
            Console.Write(i + " ");
        }

        Console.WriteLine();

        Sort(arr);

        Console.WriteLine("Отсортированный массив:");
        foreach (int i in arr)
        {
            Console.Write(i + " ");
        }
    }
}
Сортировка подсчётом работает по принципу подсчёта количества элементов массива с определённым значением, а затем строит отсортированный массив на основе этих подсчётов.
Затрыта времени:
В худшем:O(n+k), где k - макс.значение элементов ключа
В среднем:O(n+k)
