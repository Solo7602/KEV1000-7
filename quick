using System;

class QuickSort
{
    public static void Sort(int[] array, int left, int right)
    {
        if (left < right)
        {
            int pivot = Partition(array, left, right);
            Sort(array, left, pivot - 1);
            Sort(array, pivot + 1, right);
        }
    }

    private static int Partition(int[] array, int left, int right)
    {
        int pivot = array[right];
        int i = left - 1;

        for (int j = left; j < right; j++)
        {
            if (array[j] < pivot)
            {
                i++;
                Swap(ref array[i], ref array[j]);
            }
        }

        Swap(ref array[i + 1], ref array[right]);
        return i + 1;
    }

    private static void Swap(ref int a, ref int b)
    {
        int temp = a;
        a = b;
        b = temp;
    }

    public static void Main()
    {
        int[] arr = { 6, 3, 9, 5, 2 };

        Console.WriteLine("Исходный массив:");
        foreach (int i in arr)
        {
            Console.Write(i + " ");
        }

        Console.WriteLine();

        Sort(arr, 0, arr.Length - 1);

        Console.WriteLine("Отсортированный массив:");
        foreach (int i in arr)
        {
            Console.Write(i + " ");
        }
    }
}

Быстрая сортировка выбирает опорный элемент (пивот), перераспределяет элементы в массиве так, чтобы элементы меньше пивота находились слева от него, а элементы больше или равные - справа. Затем процесс разделения и сортировки повторяется для двух подмассивов, левого и правого от пивота.
Затраты времени:
В худшем:O(n^2)
В лучшем:O(nlogn)
