using System;

class RadixSort
{
    public static void Sort(int[] arr)
    {
        int max = GetMax(arr);

        for (int exp = 1; max / exp > 0; exp *= 10)
        {
            CountSort(arr, exp);
        }
    }

    private static void CountSort(int[] arr, int exp)
    {
        int n = arr.Length;
        int[] output = new int[n];
        int[] count = new int[10];

        for (int i = 0; i < n; i++)
        {
            count[(arr[i] / exp) % 10]++;
        }

        for (int i = 1; i < 10; i++)
        {
            count[i] += count[i - 1];
        }

        for (int i = n - 1; i >= 0; i--)
        {
            output[count[(arr[i] / exp) % 10] - 1] = arr[i];
            count[(arr[i] / exp) % 10]--;
        }

        for (int i = 0; i < n; i++)
        {
            arr[i] = output[i];
        }
    }

    private static int GetMax(int[] arr)
    {
        int max = arr[0];

        foreach (int num in arr)
        {
            if (num > max)
            {
                max = num;
            }
        }

        return max;
    }

    public static void Main()
    {
        int[] arr = { 170, 45, 75, 90, 802, 24, 2, 66 };

        Console.WriteLine("Исходный массив:");
        foreach (int num in arr)
        {
            Console.Write(num + " ");
        }

        Console.WriteLine();

        Sort(arr);

        Console.WriteLine("Отсортированный массив:");
        foreach (int num in arr)
        {
            Console.Write(num + " ");
        }
    }
}

Поразрядная сортировка выполняет сортировку элементов, разбивая их на разряды и сортируя их по каждому разряду от младшего к старшему. Каждая цифра числа сортируется отдельно с помощью сортировки подсчетом (Counting Sort) для разряда.
Затраты времни
В худшем:O(wn), w - количество бит, требуемых для хранения каждого ключа.
В среднем:O(wn)
