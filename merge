using System;

class MergeSort
{
    public static void Sort(int[] array)
    {
        if (array.Length <= 1)
            return;

        int mid = array.Length / 2;
        int[] left = new int[mid];
        int[] right = new int[array.Length - mid];

        Array.Copy(array, 0, left, 0, mid);
        Array.Copy(array, mid, right, 0, array.Length - mid);

        Sort(left);
        Sort(right);
        Merge(left, right, array);
    }

    private static void Merge(int[] left, int[] right, int[] array)
    {
        int i = 0, j = 0, k = 0;

        while (i < left.Length && j < right.Length)
        {
            if (left[i] <= right[j])
            {
                array[k] = left[i];
                i++;
            }
            else
            {
                array[k] = right[j];
                j++;
            }
            k++;
        }

        while (i < left.Length)
        {
            array[k] = left[i];
            i++;
            k++;
        }

        while (j < right.Length)
        {
            array[k] = right[j];
            j++;
            k++;
        }
    }

    public static void Main()
    {
        int[] arr = { 6, 3, 9, 5, 2 };

        Console.WriteLine("Исходный массив:");
        foreach (int i in arr)
        {
            Console.Write(i + " ");
        }

        Console.WriteLine();

        Sort(arr);

        Console.WriteLine("Отсортированный массив:");
        foreach (int i in arr)
        {
            Console.Write(i + " ");
        }
    }
}

Сортировка слиянием разбивает массив на две половины, рекурсивно сортирует каждую половину, затем объединяет две отсортированные половины в один отсортированный массив.

Затраты памяти:
В худшем:O(nlogn)
В среднем:O(nlogn)
