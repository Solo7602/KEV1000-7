using System;

class Node
{
    public int data;
    public Node prev;
    public Node next;

    public Node(int data)
    {
        this.data = data;
        prev = null;
        next = null;
    }
}

class DoublyLinkedList
{
    private Node head;
    private Node tail;

    public DoublyLinkedList()
    {
        head = null;
        tail = null;
    }

    public void InsertAt(int index, int data) //вставка, понятное дело, что если надо, то надо вставлять свои данные, это расписано ещё в файле по ОП
    {
        Node newNode = new Node(data);

        if (index == 0)
        {
            newNode.next = head;
            if (head != null)
            {
                head.prev = newNode;
            }
            head = newNode;

            if (tail == null)
            {
                tail = newNode;
            }
        }
        else
        {
            Node current = head;

            for (int i = 0; i < index - 1 && current != null; i++)
            {
                current = current.next;
            }

            if (current != null)
            {
                newNode.next = current.next;
                newNode.prev = current;
                current.next = newNode;

                if (newNode.next != null)
                {
                    newNode.next.prev = newNode;
                }
                else
                {
                    tail = newNode;
                }
            }
            else
            {
                Console.WriteLine("Индекс вставки находится за пределами списка");
            }
        }
    }

    public void DeleteAt(int index) //Удаление
    {
        Node current = head;

        for (int i = 0; i < index && current != null; i++)
        {
            current = current.next;
        }

        if (current == null)
        {
            Console.WriteLine("Индекс для удаления не найден");
            return;
        }

        if (current.prev != null)
        {
            current.prev.next = current.next;
        }
        else
        {
            head = current.next;
        }

        if (current.next != null)
        {
            current.next.prev = current.prev;
        }
        else
        {
            tail = current.prev;
        }
    }

    public void Display() //Отображение
    {
        Node current = head;

        if (head == null)
        {
            Console.WriteLine("Список пуст");
            return;
        }

        Console.WriteLine("Элементы двусвязного списка:");
        while (current != null)
        {
            Console.Write(current.data + " ");
            current = current.next;
        }
        Console.WriteLine();
    }
}

class Program
{
    static void Main()
    {
        DoublyLinkedList dll = new DoublyLinkedList();

        dll.InsertAt(0, 1);
        dll.InsertAt(1, 2);
        dll.InsertAt(1, 3);
        dll.InsertAt(0, 4);

        dll.Display();

        dll.DeleteAt(2);

        dll.Display();
    }
}
